var Greet = (() => {
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
  var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __reExport = (target, module, copyDefault, desc) => {
    if (module && typeof module === "object" || typeof module === "function") {
      for (let key of __getOwnPropNames(module))
        if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
          __defProp(target, key, { get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable });
    }
    return target;
  };
  var __toCommonJS = /* @__PURE__ */ ((cache) => {
    return (module, temp) => {
      return cache && cache.get(module) || (temp = __reExport(__markAsModule({}), module, 1), cache && cache.set(module, temp), temp);
    };
  })(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);

  // index.ts
  var js_exports = {};
  __export(js_exports, {
    greet: () => greet
  });

  // common/java-types/j2ts/java-types.ts
  var Collections = Java.type("java.util.Collections");
  var Collectors = Java.type("java.util.stream.Collectors");
  var Greeting = Java.type("pintomau.graal_article.spring.greeter.Greeting");
  var Iterable = Java.type("java.lang.Iterable");
  var Optional = Java.type("java.util.Optional");
  var Stream = Java.type("java.util.stream.Stream");
  var String = Java.type("java.lang.String");

  // index.ts
  function greet(greetCommand) {
    const index = Math.floor(Math.random() * greetings.length);
    return new Greeting(greetings[index], greetCommand.name());
  }
  __name(greet, "greet");
  var greetings = ["Hello", "Hi", "Welcome", "Howdy"];
  return __toCommonJS(js_exports);
})();
//# sourceMappingURL=data:application/json;base64,
